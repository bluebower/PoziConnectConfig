[User Settings]
Input_Asset_Dir: 
Output_Dir: output
SQLite_Database: {Output_Dir}/Mitchell.sqlite

[General Settings]
Description:
    Generate road segments

[Conquest Roads]
Source: {Input_Asset_Dir}/Conquest Roads.TAB
Destination: {SQLite_Database},conquest_roads
GeometryType: GEOMETRY
AssignCoordSys: EPSG:28355

[Conquest Roads - multilinestring export]
Source: {SQLite_Database},conquest_roads
Where: GeometryType(GEOMETRY)='MULTILINESTRING'
Destination: {Output_Dir}/conquest_roads_multilinestring.tab
Overwrite: true

[Conquest Roads - multilinestrings removal]
OGRInfoOnly: true
Destination: {SQLite_Database},conquest_roads
SQL: delete from conquest_roads where GeometryType(GEOMETRY)='MULTILINESTRING'

[Conquest Seals]
Source: {Input_Asset_Dir}/Road_Data_from_Conquest_Seals.csv
Destination: {SQLite_Database},conquest_roads_seals

[Bulk correction of asset chainage start/stop formatting (1)]
Destination: {SQLite_Database},dummy
SQL: update conquest_roads_seals set "Segment Start Point / Chainage"=replace("Segment Start Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Bulk correction of asset chainage start/stop formatting (2)]
Destination: {SQLite_Database},dummy
SQL: update conquest_roads_seals set "Segment End Point / Chainage"=replace("Segment End Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Conquest Pavement Sealed]
Source: {Input_Asset_Dir}/Road_Data_from_Conquest_Pavement_Sealed.csv
Destination: {SQLite_Database},conquest_pavement_sealed

[Bulk correction of asset chainage start/stop formatting (3)]
Destination: {SQLite_Database},dummy
SQL: update conquest_pavement_sealed set "Segment Start Point / Chainage"=replace("Segment Start Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Bulk correction of asset chainage start/stop formatting (4)]
Destination: {SQLite_Database},dummy
SQL: update conquest_pavement_sealed set "Segment End Point / Chainage"=replace("Segment End Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Conquest Pavement Unsealed]
Source: {Input_Asset_Dir}/Road_Data_from_Conquest_Pavement_Unsealed.csv
Destination: {SQLite_Database},conquest_pavement_unsealed

[Bulk correction of asset chainage start/stop formatting (5)]
Destination: {SQLite_Database},dummy
SQL: update conquest_pavement_unsealed set "Segment Start Point / Chainage"=replace("Segment Start Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Bulk correction of asset chainage start/stop formatting (6)]
Destination: {SQLite_Database},dummy
SQL: update conquest_pavement_unsealed set "Segment End Point / Chainage"=replace("Segment End Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Conquest Pavement Formations]
Source: {Input_Asset_Dir}/Road_Data_from_Conquest_Formations.csv
Destination: {SQLite_Database},conquest_formations

[Bulk correction of asset chainage start/stop formatting (7)]
Destination: {SQLite_Database},dummy
SQL: update conquest_formations set "Segment Start Point / Chainage"=replace("Segment Start Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Bulk correction of asset chainage start/stop formatting (8)]
Destination: {SQLite_Database},dummy
SQL: update conquest_formations set "Segment End Point / Chainage"=replace("Segment End Point / Chainage",'Ch ','')
OGRInfoOnly: true

[Conquest Segments]
Source: {SQLite_Database},conquest_roads
SQLProcessing: OGR
SQL: select x.assetid,x.type,x.start_road as AssetStartRoad,x.parentID,trim(r.AssetDescription) as ParentDesc,case when (select count(*) from conquest_roads c where substr(c.AssetDescription,1,3)=substr(upper(start_road),1,3) and ST_Distance(c.geometry,ST_StartPoint(r.geometry))<50)>0 then 1 else 0 end as FlagDirection,cast(x.ch1 as double)/ST_Length(r.geometry)*1000 as ch1,min(1.0,cast(x.ch2 as double)/ST_Length(r.geometry)*1000) as ch2,ST_Line_Substring ( r.geometry , cast(x.ch1 as double)/ST_Length(r.geometry)*1000, min(1.0,cast(x.ch2 as double)/ST_Length(r.geometry)*1000) ) as geometry from (select AssetID,"Segment Start Point / Chainage" as ch1,"Segment End Point / Chainage" as ch2,ParentID,"Road Start Point" as start_road,'SEALS' as type from conquest_roads_seals union select AssetID,"Segment Start Point / Chainage","Segment End Point / Chainage",ParentID,"Road Start Point",'FORMATIONS' from conquest_formations union select AssetID,"Segment Start Point / Chainage","Segment End Point / Chainage",ParentID,"Road Start Point",'PAVEMENT - SEALED' from conquest_pavement_sealed union select AssetID,"Segment Start Point / Chainage","Segment End Point / Chainage",ParentID,"Road Start Point",'PAVEMENT - UNSEALED' from conquest_pavement_unsealed) x, conquest_roads r where x.ParentID = r.AssetID order by r.AssetID,x.type,x.ch1
Destination: {SQLite_Database},conquest_road_segments
GeometryType: LINESTRING

[Export 1 - Spatial Road Segments]
Source: {SQLite_Database},conquest_road_segments
Destination: {Output_Dir}/road_segments.tab
Overwrite: true

[Export 2 - orphan assets (spreadsheet assets without parent in the spatial dataset)]
Source: {SQLite_Database},conquest_road_segments
Destination: {Output_Dir}/assets_orphan.csv
SQL: select distinct parentID from (select distinct cast(parentID as integer) as parentID from conquest_formations union select distinct cast(parentID as integer) from conquest_pavement_sealed union select distinct cast(parentID as integer) from conquest_pavement_unsealed union select distinct cast(parentID as integer) from conquest_roads_seals) t where parentID not in (select r.assetid from conquest_roads r)
Overwrite: true

[Export 3 - orphan spatial records (records without asset in the spreadsheet)]
Source: {SQLite_Database},conquest_road_segments
Destination: {Output_Dir}/spatial_roads_orphan.tab
SQL: select * from conquest_roads r where r.assetid not in (select distinct rd.parentid from conquest_road_segments rd)
Overwrite: true

[Export 4 - unsegmented assets (assets that were not successfully segmented)]
Source: {SQLite_Database},conquest_road_segments
Destination: {Output_Dir}/assets_unsegmented.csv
SQL: select distinct assetID from (select distinct cast(assetID as integer) as assetID from conquest_formations union select distinct cast(assetID as integer) from conquest_pavement_sealed union select distinct cast(assetID as integer) from conquest_pavement_unsealed union select distinct cast(assetID as integer) from conquest_roads_seals) t where assetID not in (select r.assetid from conquest_road_segments r)
Overwrite: true




